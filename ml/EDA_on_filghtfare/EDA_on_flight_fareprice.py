# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bltpqh_pxuj447Df9NbWGr0fF7rS4hUB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plot
import seaborn as sns
sns.set()
# Import Dataset
train_data=pd.read_excel("Data_Train.xlsx")
# lets look at datset of first 5 rows
train_data.head()

# Shape of the data
train_data.shape
# Data information
train_data.info()

#checking for null values in dataset
train_data.isnull().sum()

# we will drop the nan values
train_data.dropna(inplace=True)
train_data.isnull().sum()

# here we will extract date and month from Date of Journey
#day
train_data["journey_Date"]= pd.to_datetime(train_data['Date_of_Journey'], format= "%d/%m/%Y").dt.day

#month
train_data["journey_Month"]= pd.to_datetime(train_data['Date_of_Journey'], format= "%d/%m/%Y").dt.month
# Lets look at the first 5 rows
train_data.head()

# Since we have converted Date_of_Journey column into integers, Now we can drop as it is of no use.
train_data.drop(['Date_of_Journey'],axis=1,inplace=True)

# Departure time is when a plane leaves the gate. 
# Similar to Date_of_Journey we can extract values from Dep_Time

# Extracting Hours
train_data['Dep_hour']=pd.to_datetime(train_data['Dep_Time']).dt.hour  #pd.to_datetime

#Extracting minutes
train_data['Dep_min']=pd.to_datetime(train_data['Dep_Time']).dt.minute

#Now we will drop the dep_time, no use
train_data.drop(['Dep_Time'],axis=1,inplace=True)

# Arrival time is when a plane leaves. 
# Similar to Date_of_Journey we can extract values from Dep_Time

# Extracting Hours
train_data['Arrival_hour']=pd.to_datetime(train_data['Arrival_Time']).dt.hour  #pd.to_datetime

#Extracting minutes
train_data['Arrival_min']=pd.to_datetime(train_data['Arrival_Time']).dt.minute

#Now we will drop the dep_time, no use
train_data.drop(['Arrival_Time'],axis=1,inplace=True)

train_data.head()

# Assigning and converting Duration column into list
duration = list(train_data["Duration"])
for i in range(len(duration)):
    if len(duration[i].split()) !=2:  # Check if duration contains only hour or mins
        if "h" in duration[i]:
            duration[i] = duration[i].strip() + " 0m"   # Adds 0 minute
        else:
            duration[i] = "0h " + duration[i]           # Adds 0 hour

duration_hours = []
duration_mins = []
for i in range(len(duration)):
    duration_hours.append(int(duration[i].split(sep = "h")[0]))    # Extract hours from duration
    duration_mins.append(int(duration[i].split(sep = "m")[0].split()[-1]))   # Extracts only minutes from duration

train_data["Duration_hours"] = duration_hours
train_data["Duration_mins"] = duration_mins

#we will remove the DUrtaion clumns
train_data.drop(['Duration'],axis=1,inplace=True)

train_data['Airline'].unique()

#OneHotEncoding -----> Nominal data
Airline = train_data[["Airline"]]
Airline = pd.get_dummies(train_data['Airline'],drop_first=True)
Airline.head()

# Airline vs Price
sns.catplot(y = "Price", x = "Airline", data = train_data.sort_values("Price", ascending = False), kind="boxen", height = 6, aspect = 3)
plt.show()

# Source vs Price

sns.boxplot(y = "Price", x = "Source", data = train_data.sort_values("Price", ascending = False))
plt.show()

#OneHotEncoding -----> Nominal data
Source = train_data[["Source"]]
Source = pd.get_dummies(train_data['Source'],drop_first=True)
Source.head()

# As Destination is Nominal Categorical data we will perform OneHotEncoding

Destination = train_data[["Destination"]]

Destination = pd.get_dummies(Destination, drop_first = True)

Destination.head()

# droping column, because Additinal_info has since 80 % has no information 
# Route---> is related to no of stops
train_data.drop(["Route", "Additional_Info"], axis = 1, inplace = True)

train_data['Total_Stops'].value_counts()
# As this is case of Ordinal Categorical type we perform LabelEncoder
#we replace the values in key values 
train_data.replace({'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4},inplace=True)
train_data.head()

#Concatenate dataframe --> train_data + Airline + Source + Destination
data_train=pd.concat([train_data,Airline , Source, Destination],axis=1)
# we have drop the varibles
data_train.drop(["Airline","Source","Destination"],axis=1,inplace=True)
data_train.head()

